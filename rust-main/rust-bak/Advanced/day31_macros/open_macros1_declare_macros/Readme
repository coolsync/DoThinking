1、Rust中的 macro 主要有两种，一种是使用 macro_rules！的声明 macro ，一种是过程 macro 。而过程 macro 又主要分为三种：
（1）自定义 macro #[derive]，在 struct、enum 等上指定通过derive属性添加代码；
（2）类属性 macro ，定义可用于任意项的自定义属性；
（3）类 functin macro ，看起来像 functin, 但是作用于作为参数传递的Token。

2、 macro 和 functin 
（1） macro 是一种为写其它代码而写代码的方式。 macro 对于减少大量编写代码和维护代码非常有用。
（2）一个 functin 标签必须声明 functin 参数个数和类型， macro 只接受可变参数。
（3） macro 的定义比 functin 的定义更复杂。
（4）在调用 macro  之前 必须定义并将其引入作用域，而 functin 则可以在任何地方定义和调用。



The term macro refers to a family of features in Rust: 

declarative macros with macro_rules! and three kinds of procedural macros:

Custom #[derive] macros that specify code added with the derive attribute used on structs and enums

Attribute-like macros that define custom attributes usable on any item

Function-like macros that look like function calls but operate on the tokens specified as their argument


宏（Macro）指的是 Rust 中一系列的功能：
使用 macro_rules! 的 声明（Declarative）宏，和三种 过程（Procedural）宏：

自定义 #[derive] 宏在结构体和枚举上指定通过 derive 属性添加的代码
类属性（Attribute-like）宏定义可用于任意项的自定义属性
类函数宏看起来像函数不过作用于作为参数传递的 token